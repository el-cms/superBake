##
## File to use with superBake 0.x
##
## @copyright     Copyright 2012, Manuel Tancoigne (http://experimentslabs.com)
## @author        Manuel Tancoigne <m.tancoigne@gmail.com>
## @link          http://experimentslabs.com Experiments Labs
## @package       ELCMS.superBake.Templates.Default
## @license       GPL v3 (http://www.gnu.org/licenses/gpl.html)
## @version       0.3
##
##-----------------------------------------------------------------------
##
## Configuration file for ExperimentsLabs
## -------------------------
##      Default values.
##      Here are defined defaults settings. They are overriden in plugins definitions.
##
##-----------------------------------------------------------------------

---
defaults:

  ##
  ## This is a default view
  ##
  view:
    ## Path to the view template.
    ## (a list can be found in '<template>/views', and path must
    ## be relative to this folder.)
    template:
    ## View must be generated by default
    generate: true
    ## ... And have options
    options:
      ## Hidden fields
      hiddenFields: []
      ## Fields that don't have sorting links
      unSortableFields:
        id
      ## Hidden fields from related tables
      assoc_hiddenModelFields: []
  ##
  ## This is a default action
  ##
  action:
    ## This is the path to the template
    ## (a list can be found in '<template>/actions/actions', and path must
    ## be relative to this folder.)
    template:
    ## An array of options for current action
    options:[]
    ## Defines if the action have a view
    haveView: true
    ## The 'view' section contains the view configuration and will be fill by the
    ## 'defaults.view' section
    view: []
    ## Set this to true and the action will be removed from controller.
    ## The difefrence of this and generate: false is that this action will not be
    ## referenced in any case.
    ## Use it when you want to discard a specific action that was previously defined
    ## as a default action.
    ##
    ## i.e.: I defined an 'edit' action in the 'defaults.actions' section, but my
    ## 'PermanentController' should not have one.
    ## I'll define '...Permanents.controller.actions.edit.blackListed' to true, and
    ## this controller will not have the action created nor referenced.
    blackListed: false

  ##
  ## This is the default actions list.
  ## Here you will define your prefixes and the actions that are available for them.
  ##
  actions:
    ## This is the public prefix
    ## Public controllers have only index and view actions.
    public:
      ## Index action
      index:
        view:
          options:
            ## Public pages have no toolbar.
            noToolbar: true
      ## View action
      view:
        view:
          options:
            noToolbar: true

    ## This is the admin prefix
    ## Admin pages have all the basic CRUD actions
    admin:
      ## Index action
      index: []
      ## View action
      view: []
      ## Add action
      add: []
      ## Delete action
      delete:
        ## Delete has no view
        haveView: false
      ## Edit action
      edit: []

  ##
  ## Default configuration for a controller
  ##
  controller:
    ## Controller name.
    ## It must follows Cake conventions. If empty, model name will be used as base.
    name:
    ## Name used in views
    displayName:
    ## The controller must be generated.
    generate: true
    ## Defines if the views for this controller must be generated or not.
    ## This overrides the view.generate state.
    generateViews: true
    ## List of prefixes/actions ('defaults.actions')
    actions: []
    ## Additionnal libraries
    libraries: []

  ##
  ## Default model configuration
  ##
  model:
    ## Model name.
    ## Follow the cake conventions. If empty, part name will be used as base.
    name:
    ## The model must be generated
    generate: true
    ## Display field. Can be null and the primary key will be used in views
    displayField:
    ## Snippets list. A snippet is a bit of code to be included in your model.
    ## Snippets are in '<template>/models'
    snippets: []
    ## Options passed to template for generation
    options: []


  ##
  ## Default snippet configuration
  ##
  snippet:
    ## path to the snippet.
    ## Path is relative to <yourTemplate>/models
    ## if a snippet doesn't exists, a comment will be inserted in model as a reminder.
    path:
    ## Options for this snippet.
    options: []

  ##
  ## Default part configuration
  ##
  part:
    ## Generate this part ?
    ## This overrides sublevels "generate": model.generate, controller.generate,
    ## view.generate,...
    generate: true
    ## The controller should have a model.
    haveModel: true
    ## Model configuration ('defaults.model')
    model: []
    ## The part should have a controller.
    haveController: true
    ## Controller configuration ('defaults.controller')
    controller: []
    ## Options that must be available in both model, controllers and views.
    ## Note that options defined here can be overriden in model/controllers and
    ## views.
    options:
      ## Field names to be displayed
      ## I put generic field names here, put specific field names in their respective parts.
      fieldNames:
        user_id: Author
        license_id: License

  ##
  ## Default plugin configuration
  ##
  plugin:
    ## Plugin name, human readable
    displayName:
    ## Path where the plugin must be built.
    ## Path can be 'app::Plugin' or 'plugins'
    path: app::Plugin
    ## A plugin must be generated by default.
    ## Setting this to false will make this plugin not to be built, but all items
    ## in it (models, controllers, ...) can be used as a reference.
    generate: true
    ## Do the plugin must have routes ?
    ## (will be created in <path>/Config)
    haveRoutes: false
    ## Do the plugin must have a bootstrap file ?
    ## (will be created in <path>/Config
    haveBootstrap: false
    ## Parts of the plugin ('defaults.part')
    parts: []
    ## Menus for this plugin ('defaults.menu')
    menus: []
    ## Files for this plugin ('defaults.file')
    files: []
    ## Required files/folders for this plugin ('default.required')
    required: []
    ## An array of options
    options: []
    ## Virtual models
    virtualModels: []

  ##
  ## Default configuration for a file
  ##
  file:
    ## Template path
    ## (a list can be found in '<template>/files', and path must be relative to
    ## this folder.)
    template:
    ## Folder where the file must be copied (relative to final plugin directory)
    targetPath:
    ## Options for the file templates
    options: []
    ## Generate the file ?
    generate: true

  ##
  ## Default configuration for a menu (By default, same as a file.)
  ##
  menu:
    ## Template path
    ## (a list can be found in '<template>/menus', and path must
    ## be relative to this folder.)
    template:
    ## Target folder (relative to detination plugin's "View/" folder)
    targetPath: Elements::menus
    ## Options
    options:
      ## List of routing prefixes to be displayed in the menu.
      prefixes: []
      ## List of controllers that must be hidden by default
      hiddenControllers: []
      ## List of plugins that must be hidden by default.
      hiddenPlugins: []
      ## List of hidden actions in the menu
      hiddenActions:
        view
        delete
        edit
    ## Generate the menu ?
    generate: true

  ##
  ## Default configuration for a required file or folder.
  ## Required files/folders are located in '<template>/required' and are files
  ## and folder that may be needed by your app.
  ##
  required:
    ## Copy the files ?
    generate: true
    ## Target file or folder
    target:
    ## Source file or folder
    source:
    ## Type: file or folder
    type:
    ## For folders: Copy only the source content ?
    ## If set to false, the source dir will be created too.
    contentOnly: true